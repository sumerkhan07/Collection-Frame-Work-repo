Map Interface
The Map interface in Java is a fundamental part of the Collections Framework that represents a 
collection of key-value pairs.

What is Map Interface?
The Map interface defines a data structure that stores elements as key-value pairs, where each key
is unique and maps to exactly one value. It's not a true collection (doesn't extend Collection interface)
but is part of the Collections Framework.

Key Characteristics

Unique Keys: Each key can appear only once in a map. If you try to insert a duplicate key, the old value gets replaced.
Key-Value.

Mapping: Every key is associated with exactly one value. However, multiple keys can map to the same value.
No Duplicate Keys: While values can be duplicated, keys must be unique within the map.

Null Handling: Most implementations allow null values, and some allow null keys (except Hashtable and ConcurrentHashMap).


The Map interface provides essential methods for manipulation:

put(K key, V value)           // Adds or updates key-value pair
get(Object key)               // Retrieves value for given key  
remove(Object key)            // Removes key-value pair
containsKey(Object key)       // Checks if key exists
containsValue(Object value)   // Checks if value exists
keySet()                      // Returns set of all keys
values()                      // Returns collection of all values
entrySet()                    // Returns set of key-value pairs
size()                        // Returns number of mappings
isEmpty()                     // Checks if map is empty
clear()                       // Removes all mappings

HashMap: Hash table based implementation. Offers O(1) average performance for basic operations. 
Allows one null key and multiple null values.
Not synchronized.
LinkedHashMap: Extends HashMap but maintains insertion or access order through a doubly-linked list.

TreeMap: Red-black tree based implementation. Keys are sorted according to their natural ordering or a custom Comparator.
O(log n) performance.
Hashtable: Synchronized version of HashMap. Doesn't allow null keys or values. Legacy class.

ConcurrentHashMap: Thread-safe implementation optimized for concurrent access. Better performance than Hashtable in multi-threaded
environment.

// Creating and populating a map
Map<String, Integer> ages = new HashMap<>();
ages.put("Alice", 25);
ages.put("Bob", 30);
ages.put("Charlie", 35);

// Retrieving values
Integer aliceAge = ages.get("Alice"); // Returns 25
Integer unknownAge = ages.get("David"); // Returns null

// Iterating through map
for(Map.Entry<String, Integer> entry : ages.entrySet()) {
    System.out.println(entry.getKey() + ": " + entry.getValue());
}


What is Map interface in Java?
Answer: Map is an interface in Java Collections Framework that represents a collection of key-value pairs.
Each key is unique and maps to exactly one value. It doesn't extend Collection interface but is part of 
Collections Framework.

What are the main implementations of Map interface?
Answer:
HashMap: Hash table based, allows null values/keys, not synchronized
LinkedHashMap: Maintains insertion/access order
TreeMap: Sorted map based on keys, implements NavigableMap
Hashtable: Synchronized, doesn't allow nulls, legacy class
ConcurrentHashMap: Thread-safe, better than Hashtable for concurrent access.

How do you iterate over a Map?
Answer:
// Method 1: Using entrySet()
for(Map.Entry<String, Integer> entry : map.entrySet()) {
    System.out.println(entry.getKey() + ": " + entry.getValue());
}

// Method 2: Using keySet()
for(String key : map.keySet()) {
    System.out.println(key + ": " + map.get(key));
}

// Method 3: Using Java 8 streams
map.forEach((key, value) -> System.out.println(key + ": " + value));
